# -*- coding: utf-8 -*-
"""Taller.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16qCt8gCS1AAmyPeG0ffTqxFz52AtUnKp

###Taller

Nicole Stefanie Caro Rodriguez
Daniel Alfonso Lopez Sierra

1. Define dos variables, nombre y edad, e imprime un mensaje de saludo que las utilice.
"""

a = "Daniel" # se asigna el nombre a la A
b= "22" # se asigna el año a B
print("Hola soy",a,"tengo", b, "años") #usamos print para que muestre el mensaje completo cos el nombre y la edad

"""2. Calcula y muestra el área de un círculo. Pide al usuario que ingrese el radio.


"""

radio = float(input("Ingresa el radio del círculo: "))#colocamos el mensaje para que pueda ingresar el valor
area = 3.14159 * radio ** 2 # esta es la operacion para sacar el radio

print("El área del círculo con radio", radio, "es:", area) # Mostramos el radio del circulo

"""3. Escribe una función calcular_promedio que tome una lista de números como argumento y devuelva su promedio"""

lista = [5, 10, 15, 20, 300] # creamos la lista de nuemro
def promedio(lista): # definimos la funcion llamada promedio
    n = 0 # con esto llevamos la cuenta de la cantidad de numeros en la lista
    suma = 0 # sumamos los numeros de la lista
    for numero in lista: #hacemos un bucle para pasar por cada numero
        n += 1 #incrementamos 1 para contar los numeros
        suma += numero # el valor del numero lo agregamos a la suma
    division = suma / n # con la division obtenemos el promedio
    return division, n

resultado = promedio(lista)[0]
print("El promedio es:", resultado) # mostramos el resultado

"""**4**. Crea una lista de números y utiliza un bucle for para mostrar los números mayores que 10."""

numeros = [5, 12, 8, 15, 3, 18, 9, 20, 40, 9, 100]# creamos la lista
for numero in numeros: #usamos FOR para que busque en todos los numeros de la lista
    if numero > 10: # #ponemos la condicion que los numeros sean mayor a 10
        print(numero) #mostramos los resultados

"""5.Define un diccionario que almacene los precios de tres productos diferentes. Pide al usuario que ingrese el nombre de un producto y muestra su precio.


"""

precios_productos = {"helado": 5000, "papitas": 4000,"hamburguesa": 10000} #creamos el diccionario

producto = input("Ingresa el nombre de un producto: ") #colocamos un mesaje para que puedan meter el nombre del producto

if producto in precios_productos:
    precio = precios_productos[producto]
    print(f"El precio es: {precio}")
else :
    print("el producto no esta en la lista") # mensaje si colocan un nombre que no esta en la lista

"""6.Escribe una función es_primo que determine si un número dado es primo o no.


"""

def es_primo(n):                  #define la funcion es_primo para cualquier numero
  for i in range(2,n):            #tomar el rango de 2 hasta n
    if (n%i) == 0:                #condicional si el numero es divisible por cualquier otro numero
      return False                #False si no es primo
  return True                     #True si es primo

"""7. Crea una lista de nombres y utiliza un bucle while para imprimir cada nombre hasta que encuentres el nombre "Alex".*texto en cursiva*"""

nombres = ["nicole","daniel","sofia","daniel","Alex","nicole","daniel","sofia","daniel"] # creamos la lista de nombres
indice = 0 # nombramos la variable 0 la usamos para acceder a los elementos
while indice < len(nombres): # iniciamos un bucle mientras mientras el valor de la variable indice sea menor que la longitud en la lista que creamos
    nombre_actual = nombres[indice] # asignamos el nombre de la variable
    print(nombre_actual) # mostramos el nombre de las lista

    if nombre_actual == "Alex": # se hace para verificar si el nombre actual es Alex
        print("Se encontro a Alex.") #muestra el mesaje
        break # rompemos el bucle
    indice +=1 # lo usamos para que pase por cada nombre de la lista

"""8.Escribe una función invertir_cadena que tome una cadena como argumento y devuelva la cadena invertida."""

def invertir_cadena(cadena):             #definir la funcion de invertir_cadena junto con el argumento cadena
    cadena_invertida = cadena[::-1]      #usar un slicing para que la cadena vaya desde el final hasta el principio
    return cadena_invertida

cadena_1 = "amor a Roma"                         #hacer la frase inicial
cadena_invertida = invertir_cadena(cadena_1)     #usar la función invertir_cadena
print("Cadena Inicial:", cadena_1)               #Hacer la impresión de la frase inicial
print("Cadena Invertida:", cadena_invertida)     #Hacer la impresión de la frase invertida

"""9.Crea una lista de números pares del 2 al 20 utilizando una comprensión de lista."""

numeros_pares = [i for i in range (2,21)   #i for i es la comprensión de la lista
if i % 2 == 0]                             #es para condicionar que la lista solo tome los numeros pares entre el rango

print (numeros_pares)                      #Imprimir la lista de los numeros pares entre el rango de 2 a 20

"""10.Escribe un programa que genere los primeros N términos de la serie de Fibonacci a discresión del usuario."""

def fibonacci(n):  # Usamos la funcion
    fib_sequence = [0, 1]  # Creamos una lista con los números 0 y 1, que son los primeros de la serie

    for i in range(2, n):  # Creamos un bucle empezando desde 2 hasta n-1.
        next_term = fib_sequence[i - 1] + fib_sequence[i - 2]  # Calculamos el siguiente número sumando los dos anteriores
        fib_sequence.append(next_term)  # Añadimos ese nuevo número a la lista.

    return fib_sequence  # Devolvemos la lista completa de números de la serie

def main():  # Aquí definimos otra función llamada "main"
    try:  # intentamos hacer algo
        n = int(input("Ingrese la cantidad de términos de la serie de Fibonacci : "))  # pedimos un numero
        if n <= 0:  # Si el número es menor o igual a cero, decimos que no es válido.
            print("Ingrese un número válido mayor que cero.")
        else:  # Si el número es correcto hacemos :
            result = fibonacci(n)  # Usamos la función "fibonacci" para obtener los números de la serie.
            print(f"Los primeros {n} términos de la serie de Fibonacci son:")  # Mostramos el mensaje
            print(result)  # Mostramos la lista de números de la serie de Fibonacci.
    except ValueError:  # Si el usuario escribe algo que no es un número arrojamos otro mensaje
        print("Ingrese un número válido.")
if __name__ == "__main__":
    main()

"""11.Escribe una función calcular_interes_simple que calcule el interés simple dado el principal, la tasa de interés y el tiempo en años.


"""

def calcular_interes_simple(principal, tasa_interes, tiempo): # definimos la funcio

    interes = (principal * tasa_interes * tiempo) / 100 # formula para el interes simple
    return interes

principal = 1000000  # monto inicial
tasa_interes = 14  # interes
tiempo = 2        # años

interes = calcular_interes_simple(principal, tasa_interes, tiempo)# calculamos la formula
print(f"El interés simple es: {interes}")#mostramos la respuesta

"""12.Crea una lista de precios de acciones. Utiliza una función para calcular el promedio de esos precios."""

def calcular_promedio_precios(precios):# calcula el promedio de la lista
    total = sum(precios) # sumamos los valores de la lista
    promedio = total / len(precios)
    return promedio
precios_acciones = [100000, 20000, 5000, 47000] # creamos la lista de precios
promedio_precios = calcular_promedio_precios(precios_acciones)# calculamos los precios usando la funcion

print("Lista de precios de acciones:", precios_acciones) #mostramos la lista
print(f"El promedio de precios de acciones es: {promedio_precios:.2f}") # mostramos el promedio

"""13.Escribe una función convertir_dolares_a_euros que tome una cantidad en dólares y la convierta a euros (usando una tasa de cambio fija)."""

def convertir_dolares_a_euros(cantidad_dolares, tasa_cambio): # usamos la funcion
    cantidad_euros = cantidad_dolares * tasa_cambio # hacemos la formula para que se multipliquen
    return cantidad_euros
tasa_cambio_actual = 0.92 # definimos la tasa de cambio
cantidad_dolares = float(input("Ingrese la cantidad en dólares: "))# muestre un mensaje

cantidad_euros = convertir_dolares_a_euros(cantidad_dolares, tasa_cambio_actual)
print(f"{cantidad_dolares} dólares son equivalentes a {cantidad_euros:.2f} euros.")# muestre el mensaje del cambio

"""14.Crea una función calcular_factorial que calcule el factorial de un número dado."""

def calcular_factorial(n): # definimos la funcion
    if n == 0: # Si el valor de n es 0
        return 1 # la función devuelve directamente 1, ya que el factorial de 0 es 1.
    else: # de lo contrario
        factorial = 1
        for i in range(1, n + 1):#entramos a un bucle que por el numero se multiplique por el mismo numero
            factorial *= i
        return factorial

numero = int(input("Ingrese un número para calcular su factorial: "))# mostramos un mesaje
factorial_resultado = calcular_factorial(numero)# llamamos a la funcion
print(f"El factorial de {numero} es {factorial_resultado}") # mostramos el valor

"""15.Define un diccionario que contenga los nombres y saldos de cuentas bancarias. Escribe una función que encuentre la cuenta con el saldo más alto."""

def encontrar_cuenta_mas_alta(cuentas): #asignamos la funcion
    cuenta_mas_alta = None # esto asegura que cualquier valor en el diccionario será mayor que este valor inicial
    saldo_mas_alto = float("-inf")  # Inicializar con un valor negativo infinito

    for cuenta, saldo in cuentas.items(): # creamos un bucle
    # Si el saldo actual es mayor, actualiza saldo_mas_alto con ese saldo y actualiza cuenta_mas_alta con la cuenta
        if saldo > saldo_mas_alto:
            saldo_mas_alto = saldo
            cuenta_mas_alta = cuenta

    return cuenta_mas_alta, saldo_mas_alto

# Diccionario de cuentas bancarias
cuentas_bancarias = {
    "nicole": 500000,
    "sofia": 300000,
    "daniel": 2000000,
    "Alex": 100000}

# Encontrar la cuenta con el saldo más alto usando la función
cuenta_mas_alta, saldo_mas_alto = encontrar_cuenta_mas_alta(cuentas_bancarias)

print("Cuentas bancarias:")# mostramos las cuentas
for cuenta, saldo in cuentas_bancarias.items():
    print(f"{cuenta}: ${saldo:.2f}")

print(f"la persona {cuenta_mas_alta} tiene mas dinero ${saldo_mas_alto:.2f}")#mostramos el valor de la cuenta mas alta

"""17.Crea una función calcular_descuento que calcule el precio final después de aplicar un descuento a un artículo."""

def calcular_descuento(precio_original, descuento_porcentaje): # definimos la funcion
    descuento = (precio_original * descuento_porcentaje) / 100 # calculamos el valor del descuento aplicado
    precio_final = precio_original - descuento # calculamos el precio final
    return precio_final# cuando se realice el calculo regresa al precio final

precio_original = float(input("Ingrese el precio original del artículo: "))#mostramos mensaje del precio inicial del articulo
descuento_porcentaje = float(input("Ingrese el porcentaje de descuento (%): "))#mostramos mensaje del descuento y con FLOAT convertimos el valor en decimal

precio_final = calcular_descuento(precio_original, descuento_porcentaje)# realizamos el calculo final
print(f"El precio final después del descuento es: {precio_final:.2f}")# mostramos el descuento+

"""18.Escribe una función que tome una lista de números y devuelva una nueva lista con solo los números pares."""

def obtener_numeros_pares(lista):# definimos la funcion
    numeros_pares = []# creamos una lista vacia
    for numero in lista: # empezamos un bucle
        if numero % 2 == 0:# verificamos si el numero actual en el bucle es par
            numeros_pares.append(numero)# si el numero es par se agrega a la lista
    return numeros_pares#regresamos a la lista de numero pares

numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]# creamos la lista
numeros_pares = obtener_numeros_pares(numeros)#Esto calculará y almacenará los números pares en la lista
print("Números originales:", numeros)# mostramos la lista
print("Números pares:", numeros_pares)#mostramos los numeros pares

"""19.Crea una lista de números y utiliza una función para encontrar el número más grande y el más pequeño."""

def encontrar_numero_mas_grande(lista):
    mas_grande = max(lista) # encontramos el valor mas alto
    return mas_grande

def encontrar_numero_mas_pequeno(lista):
    mas_pequeno = min(lista) # para encontrar el valor mas pequeño
    return mas_pequeno

# creamos lista
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 500000]

# Utilizar las funciones para encontrar el número más grande y el más pequeño
numero_mas_grande = encontrar_numero_mas_grande(numeros)
numero_mas_pequeno = encontrar_numero_mas_pequeno(numeros)

print("Lista de números:", numeros)# mostramos la lista de numeros
print("El número más grande es:", numero_mas_grande)#mostramos el numero grande
print("El número más pequeño es:", numero_mas_pequeno)#mostramos el numero pequeño

"""21.Crea una función calcular_amortizacion que calcule la amortización de un préstamo a lo largo del tiempo."""

def calcular_amortizacion(monto, tasa_interes_anual, plazo):

    tasa_interes_mensual = tasa_interes_anual / 12 / 100                                         #Plantear la conversion de la tasa anual a mensual
    cuota_mensual = (monto * tasa_interes_mensual) / (1 - (1 + tasa_interes_mensual)**(-plazo))  #Plantear el calculo de cada cuota mensual

    tabla_amortizacion = []
    saldo_final = monto

    for mes in range(1, plazo + 1):                                             #crear el bucle para que vaya sumando +1 al plazo anterior y las demas condiciones
        interes_mensual = saldo_final * tasa_interes_mensual                    #calcular el interes entre el saldo final y la tasa fijada
        abono_pagado = cuota_mensual - interes_mensual                          #los abonos son la resta entre la cuota fijada de cada mes menos el interes mensual
        saldo_final -= abono_pagado
        tabla_amortizacion.append((mes, cuota_mensual, interes_mensual, abono_pagado, saldo_final)) #agregar a la lista lo que se requiere en la tabla de amortizacion

    return tabla_amortizacion                                            #dar el valor de la tabla de amortizacion

monto = 10000
tasa_interes_anual = 5
plazo = 6

tabla = calcular_amortizacion(monto, tasa_interes_anual, plazo)          #dar las opciones que deben salir en la tabla
for mes, cuota, interes, capital, saldo in tabla:                        #hacer el bucle para cada opcion teniendo en cuenta el plazo
    print(f"Mes {mes}| Cuota: {cuota} | Interés: {interes} | Capital Pagado: {capital} | Saldo Final: {saldo}")

"""22.Escribe un programa que determine si un número dado es un número perfecto o no"""

def numero_perfecto(n):# se define la funcion

  suma = 0 #Esta variable se usara para acumular la suma de los divisores propios del número.
  for i in range(1, n): #creamos un bucle esto hace que concidere los divisores propios del número.
    if n % i == 0:# se verifica si n es divisible por I
      suma += i #si es asi se agrega a la variable suma
  return suma == n

if __name__ == "__main__":#el código dentro de este bloque solo se ejecute cuando el script se ejecute directamente y no cuando se importe en otro script
  n = int(input("Introduzca un número: "))#mensaje para el valor
  if numero_perfecto(n):#se verifica si el numero es perfecto
    print(n, "es un número perfecto.")# se acepta el numero
  else:# de lo contrario
    print(n, "no es un número perfecto.")# mensaje

"""23.Define un diccionario que almacene las tasas de interés para diferentes tipos de préstamos. Pide al usuario que ingrese un tipo de préstamo y muestra la tasa de interés correspondiente."""

#creamos diccionario
prestamos = {"hipotecario": 12.10, "automóvil": 12.20,"tarjeta de crédito": 29.29,"educativo": 9.0,"libre inversion": 24.89}

tipo_prestamo = input("¿Qué tipo de préstamo estás considerando? ")#mensaje de entrada

if tipo_prestamo in prestamos:
  tasa_interes = prestamos[tipo_prestamo]
  print(f"La tasa de interés para un préstamo {tipo_prestamo} es {tasa_interes}%.")#mesaje completo
else:
  print(f"Lo siento, no tengo información sobre la tasa de interés para un préstamo {tipo_prestamo}.")# si pide algo fuera del diccionario

"""24.Escribe una función calcular_media_geometrica que calcule la media geométrica de una lista de números."""

def calcular_media_geometrica(lista):#definimos la funcion
    producto = 1 # asignamos valor 1
    for numero in lista:# iniciamos un bucle sobre la lista
        producto *= numero#el valor actual en numero se multiplica con el valor acumulado en producto. Esto calcula el producto de todos los numeros en la lista
    media_geometrica = producto ** (1 / len(lista))# calculamos la media geometrica
    return media_geometrica

numeros = [2, 4, 8, 16]# lista
media_geometrica = calcular_media_geometrica(numeros)# llamamos la funcion
print("La media geométrica de la lista es:", media_geometrica)#mostramos la media geometrica de la lista

"""25.Crea una lista de números y utiliza una función para encontrar el segundo número más grande."""

def encontrar_segundo_mas_grande(n):# definimos la funcion
    if len(n) < 2:#colocamos la condicion si hay menos de 2 elementos en la lista
        return None

    maximo = max(n)# calculamos el numero maximo
    n.remove(maximo)#removemos el dato
    segundo_maximo = max(n)#calculamos el nuevo numero maximo
    return segundo_maximo

L25 = [18,5,24,20,15,39,10,63]#creamos lista
segundo_mas_grande = encontrar_segundo_mas_grande(L25)#llamamos la funcion

if segundo_mas_grande is not None:
    print("El segundo número más grande es:", segundo_mas_grande)# mostramos el segundo numero mas grande

"""26.Escribe un programa que calcule e imprima los primeros  n  números de la serie de los números de Lucas a discresión del usuario."""

def numeros_de_lucas(n):#definimos la funcion

  l26 = [2, 1]#lista con los primeros numeros de lucas
  for i in range(2, n):#se inicia un bucle
    l26.append(l26[i - 1] + l26[i - 2])#se calcula el siguiente número de Lucas sumando los dos números anteriores en la lista l26. Luego, este número se agrega a la lista.
  return l26

if __name__ == "__main__":#aseguramos la ejecucion
  n = int(input("¿Cuántos números de Lucas quieres imprimir? "))# mensaje de entrada
  lista = numeros_de_lucas(n)#llamamos la funcion
  for nlucas in lista:# que muestre cada unno de los numeros de lucas en la lista
    print(nlucas)#mostramos los numeros de lucas

"""27.Crea una función calcular_cuota_mensual que calcule la cuota mensual de un préstamo hipotecario."""

def calcular_cuota_mensual(monto, tasa_interes_anual, plazo):# definimos la funcion
    tasa_interes_mensual = tasa_interes_anual / 12 / 100 #se calcula la tasa de interes y la convertimos en decimal
    cuota_mensual = (monto* tasa_interes_mensual) / (1 - (1 + tasa_interes_mensual)**(-plazo))#calculamos la cuota
    return cuota_mensual

monto = 550000000
tasa_interes_anual = 12.10
plazo = 24

cuota = calcular_cuota_mensual(monto, tasa_interes_anual, plazo)# llamamos la funcion creada
print("La cuota mensual del préstamo hipotecario es:", cuota)#mostramos mesaje de la cuota

"""28.Escribe una función que determine si un número es un número de Armstrong (un número de n dígitos que es igual a la suma de sus dígitos elevados a la n)."""

def es_numero_armstrong(numero):# definimos funcion

    n1 = str(numero)# convertimos el numero en una cadena
    n = len(n1)#calculamos la cantidad de numeros la tomar la cadena
    suma = 0# la usamos para acumular la suma de los digitos
    for i in n1:#iniciamos un bucle
        suma += int(i) ** n#convertimos el numero actual en entero
    return numero == suma

numero = int(input("Ingrese un número: "))# mostramos el mesaje de entrada
if es_numero_armstrong(numero):#Se verifica si el número ingresado es un numero de Armstrong utilizando la función
    print(numero, "es un número de Armstrong.")# mostramos mensaje
else:
    print(numero, "no es un número de Armstrong.")

"""29.Define un diccionario que almacene los símbolos de moneda y sus respectivos códigos. Escribe un programa que convierta una cantidad de dinero de una moneda a otra."""

monedas = {"Dolar","Peso colombiano","Euro","Libra esterlina","Yen"}#definimos al grupo e monedas

def convertir_moneda(cantidad, moneda_inicial, moneda_final, tasa_cambio):#definimos la funcion
    tasa_origen = tasa_cambio[moneda_inicial]# definimos la tasa de cambio para la moneda principal
    tasa_destino = tasa_cambio[moneda_final]# definimos la tasa de cambio para la monedadestino
    conversion = dinero * (tasa_destino / tasa_origen)# calculamos la cantidad convetida
    return conversion

tasa_cambio = {"Dolar":1,"Peso colombiano":4123,"Euro":0.92,"Libra esterlina": 0.77,"Yen": 117.75,}#creamos el diccionario

dinero = float(input("Ingrese la cantidad de dinero: "))# mensaje y usamos float para convertir el valor en decimal
moneda_inicial = input("Ingrese la moneda de origen: ")#mensaje
moneda_final = input("Ingrese la moneda a convertir: ")#mensaje

if moneda_inicial in tasa_cambio and moneda_final in tasa_cambio:
    cantidad_convertida = convertir_moneda(dinero, moneda_inicial, moneda_final, tasa_cambio)
    print(f"{dinero} {moneda_inicial} equivale a {cantidad_convertida} {moneda_final}")# verificamos si esta en el diccionario
else:
    print("Monedas no encontradas en las tasas de cambio.")# mesaje si no existe en el diccionario la moneda

"""30.Crea una función que calcule la desviación estándar de una lista de números."""

def calcular_desviacion_estandar(n):#definimos variables
    n2 = len(n)#Se calcula la longitud de la lista n y se almacena en la variable
    if n2 <= 1:# se verifica el largo de la lista
        return None

    suma = sum (n)#calculamos la suma de los valores de la lista
    media = suma / n2#calculamos la media de la lista
    suma_cuadrados = 0#guardar la suma de cuadrados
    for numero in n:#iniciamos bucle
        diferencia = numero - media# restamos el numero y la media
        suma_cuadrados += diferencia ** 2# se suma el cuadrado de la diferencia al valor acumulado

    desviacion_estandar = math.sqrt(suma_cuadrados / (n2 - 1))#calculamos la desviacion
    return desviacion_estandar

l30 = [21, 45, 8, 10, 29, 68, 85, 4, 37]#creamos lista
desviacion = calcular_desviacion_estandar(l30)# usamos la funcion creada
print("La desviación estándar de la lista es:", desviacion)#mostramos el resultado

