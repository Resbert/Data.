{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xbu8B2svp_ZC"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Crea una lista de números y utiliza un bucle for para mostrar los números mayores que 10.\n"
      ],
      "metadata": {
        "id": "Tn7yCsdAqBsY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "l4 = [3,8,15,59,5,23,38,63]   #lista de numeros"
      ],
      "metadata": {
        "id": "Apy2THZkqIWg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for num in l4:                #iniciar el bucle con la lista L4\n",
        "  if num >10:                 #condicional de que sean numeros mayores a 10\n",
        "    print(num)                #mostrar los numeros que cumplen la condición"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JmWuh9WyrAEb",
        "outputId": "f14375d6-a712-437e-e6f6-28615f935d21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n",
            "59\n",
            "23\n",
            "38\n",
            "63\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Escribe una función es_primo que determine si un número dado es primo o no."
      ],
      "metadata": {
        "id": "-uosGnpwtzW6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def es_primo(n):                  #define la funcion es_primo para cualquier numero\n",
        "  for i in range(2,n):            #tomar el rango de 2 hasta n\n",
        "    if (n%i) == 0:                #condicional si el numero es divisible por cualquier otro numero\n",
        "      return False                #False si no es primo\n",
        "  return True                     #True si es primo"
      ],
      "metadata": {
        "id": "zSiocl6js9Hx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "es_primo(3679)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xjpvmr9XwjKi",
        "outputId": "64c64842-3e9e-4934-f62f-63d5163a47a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "es_primo(19)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UnoEVjQwovy",
        "outputId": "840f2f6e-f258-4e1e-e6fc-436854c48812"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8.Escribe una función invertir_cadena que tome una cadena como argumento y devuelva la cadena invertida.\n",
        "\n"
      ],
      "metadata": {
        "id": "mS_GvHLexEHi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def invertir_cadena(cadena):             #definir la funcion de invertir_cadena junto con el argumento cadena\n",
        "    cadena_invertida = cadena[::-1]      #usar un slicing para que la cadena vaya desde el final hasta el principio\n",
        "    return cadena_invertida\n",
        "\n",
        "cadena_1 = \"amor a Roma\"                         #hacer la frase inicial\n",
        "cadena_invertida = invertir_cadena(cadena_1)     #usar la función invertir_cadena\n",
        "print(\"Cadena Inicial:\", cadena_1)               #Hacer la impresión de la frase inicial\n",
        "print(\"Cadena Invertida:\", cadena_invertida)     #Hacer la impresión de la frase invertida\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-triuTfyKUe",
        "outputId": "31707789-86e3-43f2-dcd8-cb00258d4dff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cadena Inicial: amor a Roma\n",
            "Cadena Invertida: amoR a roma\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9.Crea una lista de números pares del 2 al 20 utilizando una comprensión de lista"
      ],
      "metadata": {
        "id": "Uy6UjkY0qwkk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeros_pares = [i for i in range (2,21)   #i for i es la comprensión de la lista\n",
        "if i % 2 == 0]                             #es para condicionar que la lista solo tome los numeros pares entre el rango\n",
        "\n",
        "print (numeros_pares)                      #Imprimir la lista de los numeros pares entre el rango de 2 a 20"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Ixftp6yuK2U",
        "outputId": "d1464f78-93a5-4bbe-fc6b-6b5d6a54697b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "21.Crea una función calcular_amortizacion que calcule la amortización de un préstamo a lo largo del tiempo.\n"
      ],
      "metadata": {
        "id": "bSr2ZH_P79CF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_amortizacion(monto, tasa_interes_anual, plazo):\n",
        "\n",
        "    tasa_interes_mensual = tasa_interes_anual / 12 / 100                                         #Plantear la conversion de la tasa anual a mensual\n",
        "    cuota_mensual = (monto * tasa_interes_mensual) / (1 - (1 + tasa_interes_mensual)**(-plazo))  #Plantear el calculo de cada cuota mensual\n",
        "\n",
        "    tabla_amortizacion = []\n",
        "    saldo_final = monto\n",
        "\n",
        "    for mes in range(1, plazo + 1):                                             #crear el bucle para que vaya sumando +1 al plazo anterior y las demas condiciones\n",
        "        interes_mensual = saldo_final * tasa_interes_mensual                    #calcular el interes entre el saldo final y la tasa fijada\n",
        "        abono_pagado = cuota_mensual - interes_mensual                          #los abonos son la resta entre la cuota fijada de cada mes menos el interes mensual\n",
        "        saldo_final -= abono_pagado\n",
        "        tabla_amortizacion.append((mes, cuota_mensual, interes_mensual, abono_pagado, saldo_final)) #agregar a la lista lo que se requiere en la tabla de amortizacion\n",
        "\n",
        "    return tabla_amortizacion                                            #dar el valor de la tabla de amortizacion\n",
        "\n",
        "monto = 10000\n",
        "tasa_interes_anual = 5\n",
        "plazo = 6\n",
        "\n",
        "tabla = calcular_amortizacion(monto, tasa_interes_anual, plazo)          #dar las opciones que deben salir en la tabla\n",
        "for mes, cuota, interes, capital, saldo in tabla:                        #hacer el bucle para cada opcion teniendo en cuenta el plazo\n",
        "    print(f\"Mes {mes}| Cuota: {cuota} | Interés: {interes} | Capital Pagado: {capital} | Saldo Final: {saldo}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vDigRrhw23Sr",
        "outputId": "5087ee7b-8b54-4e9d-b3f3-de75ea63a339"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mes 1| Cuota: 1691.0564402798896 | Interés: 41.666666666666664 | Capital Pagado: 1649.3897736132228 | Saldo Final: 8350.610226386778\n",
            "Mes 2| Cuota: 1691.0564402798896 | Interés: 34.794209276611575 | Capital Pagado: 1656.262231003278 | Saldo Final: 6694.347995383499\n",
            "Mes 3| Cuota: 1691.0564402798896 | Interés: 27.893116647431246 | Capital Pagado: 1663.1633236324583 | Saldo Final: 5031.184671751042\n",
            "Mes 4| Cuota: 1691.0564402798896 | Interés: 20.963269465629338 | Capital Pagado: 1670.0931708142602 | Saldo Final: 3361.0915009367814\n",
            "Mes 5| Cuota: 1691.0564402798896 | Interés: 14.004547920569921 | Capital Pagado: 1677.0518923593197 | Saldo Final: 1684.0396085774616\n",
            "Mes 6| Cuota: 1691.0564402798896 | Interés: 7.01683170240609 | Capital Pagado: 1684.0396085774835 | Saldo Final: -2.1827872842550278e-11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "22.Escribe un programa que determine si un número dado es un número perfecto o no"
      ],
      "metadata": {
        "id": "BjlNfBPfjH_7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def numero_perfecto(n):\n",
        "\n",
        "  suma = 0\n",
        "  for i in range(1, n):\n",
        "    if n % i == 0:\n",
        "      suma += i\n",
        "  return suma == n\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  n = int(input(\"Introduzca un número: \"))\n",
        "  if numero_perfecto(n):\n",
        "    print(n, \"es un número perfecto.\")\n",
        "  else:\n",
        "    print(n, \"no es un número perfecto.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dP7rqdNdjlQZ",
        "outputId": "f6379ab0-176b-4152-c5cc-71ccedc3a32a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduzca un número: 89\n",
            "89 no es un número perfecto.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "23.Define un diccionario que almacene las tasas de interés para diferentes tipos de préstamos. Pide al usuario que ingrese un tipo de préstamo y muestra la tasa de interés correspondiente.\n"
      ],
      "metadata": {
        "id": "NFTiDdoCkjAY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prestamos = {\"hipotecario\": 12.10, \"automóvil\": 12.20,\"tarjeta de crédito\": 29.29,\"educativo\": 9.0,\"libre inversion\": 24.89}\n",
        "\n",
        "tipo_prestamo = input(\"¿Qué tipo de préstamo estás considerando? \")\n",
        "\n",
        "if tipo_prestamo in prestamos:\n",
        "  tasa_interes = prestamos[tipo_prestamo]\n",
        "  print(f\"La tasa de interés para un préstamo {tipo_prestamo} es {tasa_interes}%.\")\n",
        "else:\n",
        "  print(f\"Lo siento, no tengo información sobre la tasa de interés para un préstamo {tipo_prestamo}.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MU24Kpupj9Tb",
        "outputId": "bbe72ea7-3a9a-4ff0-e978-c789ef2e9496"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¿Qué tipo de préstamo estás considerando? hipotecario\n",
            "La tasa de interés para un préstamo hipotecario es 12.1%.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "24.Escribe una función calcular_media_geometrica que calcule la media geométrica de una lista de números.\n"
      ],
      "metadata": {
        "id": "Uws4EkyCmRZC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math                                                           #importar funciones matematicas\n",
        "\n",
        "def calcular_media_geometrica(lista):\n",
        "    if len(lista) == 0:\n",
        "        return None\n",
        "\n",
        "    producto = 1\n",
        "    for numero in lista:\n",
        "        producto *= numero\n",
        "    media_geometrica = math.pow(producto, 1 / len(lista))\n",
        "    return media_geometrica"
      ],
      "metadata": {
        "id": "4DqorWusnv-k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "L24 = [25, 46, 18, 6, 10, 35, 63, 2]\n",
        "media_geometrica = calcular_media_geometrica(L24)\n",
        "print(\"La media geométrica es:\", media_geometrica)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kZyLT5jQocYh",
        "outputId": "0fa44f89-c06e-44ec-d7fd-f4f0d0ea3d84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La media geométrica es: 16.493773379413362\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "25.Crea una lista de números y utiliza una función para encontrar el segundo número más grande."
      ],
      "metadata": {
        "id": "xcoBXoyvo1RI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def encontrar_segundo_mas_grande(n):\n",
        "    if len(n) < 2:\n",
        "        return None\n",
        "\n",
        "    maximo = max(n)\n",
        "    n.remove(maximo)\n",
        "    segundo_maximo = max(n)\n",
        "\n",
        "    return segundo_maximo"
      ],
      "metadata": {
        "id": "l_uWDhwUn04a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "L25 = [18,5,24,20,15,39,10,63]\n",
        "segundo_mas_grande = encontrar_segundo_mas_grande(L25)\n",
        "\n",
        "if segundo_mas_grande is not None:\n",
        "    print(\"El segundo número más grande es:\", segundo_mas_grande)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AltN3XGBpTjZ",
        "outputId": "98896113-2d1a-4518-bc7f-345f528ccd2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El segundo número más grande es: 39\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "26.Escribe un programa que calcule e imprima los primeros $n$ números de la serie de los números de Lucas a discresión del usuario."
      ],
      "metadata": {
        "id": "6C6Fg4HzrPw7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def numeros_de_lucas(n):\n",
        "\n",
        "  l26 = [2, 1]\n",
        "  for i in range(2, n):\n",
        "    l26.append(l26[i - 1] + l26[i - 2])\n",
        "  return l26\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  n = int(input(\"¿Cuántos números de Lucas quieres imprimir? \"))\n",
        "  lista = numeros_de_lucas(n)\n",
        "  for nlucas in lista:\n",
        "    print(nlucas)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7kLiHI9sq5_",
        "outputId": "6fd33c78-ee43-4fe0-e407-2a91d198be20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¿Cuántos números de Lucas quieres imprimir? 7\n",
            "2\n",
            "1\n",
            "3\n",
            "4\n",
            "7\n",
            "11\n",
            "18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "27.Crea una función calcular_cuota_mensual que calcule la cuota mensual de un préstamo hipotecario.\n"
      ],
      "metadata": {
        "id": "1BUX38HAujtb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_cuota_mensual(monto, tasa_interes_anual, plazo):\n",
        "    tasa_interes_mensual = tasa_interes_anual / 12 / 100\n",
        "    cuota_mensual = (monto* tasa_interes_mensual) / (1 - (1 + tasa_interes_mensual)**(-plazo))\n",
        "    return cuota_mensual\n",
        "\n",
        "monto = 550000000\n",
        "tasa_interes_anual = 12.10\n",
        "plazo = 24\n",
        "\n",
        "cuota = calcular_cuota_mensual(monto, tasa_interes_anual, plazo)\n",
        "print(\"La cuota mensual del préstamo hipotecario es:\", cuota)\n"
      ],
      "metadata": {
        "id": "rj3SoRTlszSx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "161f9369-8c22-48fa-d32a-ba3b26165406"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La cuota mensual del préstamo hipotecario es: 25916101.817335084\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "28.Escribe una función que determine si un número es un número de Armstrong (un número de n dígitos que es igual a la suma de sus dígitos elevados a la n).\n"
      ],
      "metadata": {
        "id": "zoCkN90O3EMJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def es_numero_armstrong(numero):\n",
        "\n",
        "    n1 = str(numero)\n",
        "    n = len(n1)\n",
        "    suma = 0\n",
        "    for i in n1:\n",
        "        suma += int(i) ** n\n",
        "    return numero == suma\n",
        "\n",
        "numero = int(input(\"Ingrese un número: \"))\n",
        "if es_numero_armstrong(numero):\n",
        "    print(numero, \"es un número de Armstrong.\")\n",
        "else:\n",
        "    print(numero, \"no es un número de Armstrong.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PIzkRDOw4AdZ",
        "outputId": "ab6d9640-3ad2-44b9-a952-dafebf96f33e"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese un número: 371\n",
            "371 es un número de Armstrong.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "29.Define un diccionario que almacene los símbolos de moneda y sus respectivos códigos. Escribe un programa que convierta una cantidad de dinero de una moneda a otra."
      ],
      "metadata": {
        "id": "nMBiYbhh5_iR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "monedas = {\"Dólar\",\"Peso colombiano\",\"Euro\",\"Libra esterlina\",\"Yen\"}\n",
        "\n",
        "def convertir_moneda(cantidad, moneda_inicial, moneda_final, tasa_cambio):\n",
        "    tasa_origen = tasa_cambio[moneda_inicial]\n",
        "    tasa_destino = tasa_cambio[moneda_final]\n",
        "    conversion = dinero * (tasa_destino / tasa_origen)\n",
        "    return conversion\n",
        "\n",
        "tasa_cambio = {\"Dolar\":1,\"Peso colombiano\":4123,\"Euro\":0.92,\"Libra esterlina\": 0.77,\"Yen\": 117.75,}\n",
        "\n",
        "dinero = float(input(\"Ingrese la cantidad de dinero: \"))\n",
        "moneda_inicial = input(\"Ingrese la moneda de origen: \")\n",
        "moneda_final = input(\"Ingrese la moneda a convertir: \")\n",
        "\n",
        "if moneda_inicial in tasa_cambio and moneda_final in tasa_cambio:\n",
        "    cantidad_convertida = convertir_moneda(dinero, moneda_inicial, moneda_final, tasa_cambio)\n",
        "    print(f\"{dinero} {moneda_inicial} equivale a {cantidad_convertida} {moneda_final}\")\n",
        "else:\n",
        "    print(\"Monedas no encontradas en las tasas de cambio.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C-3YZcWq49T2",
        "outputId": "68ae49c6-5341-4e85-a43d-c90167b56426"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese la cantidad de dinero: 301.23\n",
            "Ingrese la moneda de origen: Euro\n",
            "Ingrese la moneda a convertir: Peso colombiano\n",
            "301.23 Euro equivale a 1349968.793478261 Peso colombiano\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "30.Crea una función que calcule la desviación estándar de una lista de números.\n"
      ],
      "metadata": {
        "id": "a3pLFEPfAKVY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_desviacion_estandar(n):\n",
        "    n2 = len(n)\n",
        "    if n2 <= 1:\n",
        "        return None\n",
        "\n",
        "    suma = sum (n)\n",
        "    media = suma / n2\n",
        "    suma_cuadrados = 0\n",
        "    for numero in n:\n",
        "        diferencia = numero - media\n",
        "        suma_cuadrados += diferencia ** 2\n",
        "\n",
        "    desviacion_estandar = math.sqrt(suma_cuadrados / (n2 - 1))\n",
        "    return desviacion_estandar\n",
        "\n",
        "l30 = [21, 45, 8, 10, 29, 68, 85, 4, 37]\n",
        "desviacion = calcular_desviacion_estandar(l30)\n",
        "print(\"La desviación estándar de la lista es:\", desviacion)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wBQxcwwu-CWU",
        "outputId": "7c015568-84bb-4f99-bc7a-08102e78ed89"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La desviación estándar de la lista es: 27.91256188727776\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-EF_EB3nB2OU"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
